import re 
from datetime import datetime as dt
from asyncio import sleep

from aiogram.utils.exceptions import InlineKeyboardExpected

import globals
from sites import Bomber
from globals import dp
from config import config

from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from db_models.User import session, User, DataUser

from payment.payment import Payment

cfg = config.Config()

@dp.message_handler(lambda message: message.text == "üí£–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä")
async def ru_attack_phone(message: Message):
    '''
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê—Ç–∞–∫–æ–≤–∞—Ç—å"

    –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤

    –†—É—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
    '''

    user_data = session.query(DataUser).filter_by(user_id=message.from_user.id).first()

    if user_data == None:
        user_data = DataUser(
                user_id=message.from_user.id, date=dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S"), 
                status=30, last_phone="None", 
                last_date="None"
        )
        session.add(user_data)
        session.commit()

        await message.answer(
                f"üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–µ ‚ûú\n\n"
                f"üìå–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –∞—Ç–∞–∫—É!\n\n"
                f"‚òéÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã(–±–µ–∑ +)‚§µÔ∏è", 
                )
    else:
        date  = dt.strptime(user_data.date, "%d-%m-%Y %H:%M:%S") if user_data.date != "None" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" #Time
        date  = dt.strftime(date, "%d-%m-%Y %H:%M:%S") if date != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        phone = f"<code>{user_data.last_phone}</code>" if user_data.last_phone != "None" else "<b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</b>"
        
        await message.answer(
                f"üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–µ ‚ûú\n\n"
                f"üï∞–í—Ä–µ–º—è: <b>{date}</b>\n"
                f"üìå–ù–æ–º–µ—Ä: {phone}\n"
                f"‚è±–û—Å—Ç–∞–ª–æ—Å—å –∫—Ä—É–≥–æ–≤: <b>{user_data.status}</b>\n\n"
                f"‚òéÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã(–±–µ–∑ +)‚§µÔ∏è"
                )

@dp.message_handler(lambda message: message.text == "üí£Attack number")
async def eng_attack_phone(message: Message):
    '''
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê—Ç–∞–∫–æ–≤–∞—Ç—å"

    –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤

    –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
    '''

    user_data = session.query(DataUser).filter_by(user_id=message.from_user.id).first()

    if user_data == None:
        user_data = DataUser(
                user_id=message.from_user.id, date=dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S"), 
                status=30, last_phone="None", 
                last_date="None"
        )
        session.add(user_data)
        session.commit()

        await message.answer(
                f"üìÑInformation about the last attack ‚ûú\n\n"
                f"üìåYou haven't made an attack yet!\n\n"
                f"‚òéÔ∏èEnter the victim's phone number (no +)‚§µÔ∏è", 
                )
    else:
        date  = dt.strptime(user_data.date, "%d-%m-%Y %H:%M:%S") if user_data.date != "None" else "Unknown"
        date  = dt.strftime(date, "%d-%m-%Y %H:%M:%S") if date != "Unknown" else "Unknown"
        phone = f"<code>{user_data.last_phone}</code>" if user_data.last_phone != "None" else "<b>Unknown</b>"
        
        await message.answer(
                f"üìÑInformation about the last attack ‚ûú\n\n"
                f"üï∞Time: <b>{date}</b>\n"
                f"üìåPhone number: {phone}\n"
                f"‚è±Circles left: <b>{user_data.status}</b>\n\n"
                f"‚òéÔ∏èEnter the victim's phone number (no +)‚§µÔ∏è"
                )

@dp.message_handler(lambda message: not message.text.startswith((
        "/msg", "/help",
         "/usd", "/btc", 
         "/bnb", "/eth", 
         "/stat", "/mail", 
         "üì≤–ö—É–ø–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä"))
         )
async def take_phone(message: Message):
    if not message.chat.id in cfg.super_groups:     #Not super groups
        if globals.state_data != []:                #Not attack phone number
            if globals.state_data[0] == "payment":  #If this is payment

                try:                   
                    qiwi_data = Payment(count=float(message.text)).create_invoice() #Create invoice and get data

                    if not qiwi_data:
                        globals.state_data = [] #Reset array (qiwi data)
                        return await message.answer("Error")

                    r_url = qiwi_data["payUrl"]     #Url for payment
                    billId = qiwi_data["billId"]    #Id payment
                    user_id = globals.state_data[1] #User id 

                    continue_payment = InlineKeyboardMarkup(
                        inline_keyboard = [
                            [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É", url=r_url)]
                        ]
                    )
                    await message.answer(
                        text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–æ–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã", 
                        reply_markup=continue_payment
                    )

                    globals.state_data = [] #Reset array (qiwi data)

                    while True:
                        value_status = Payment(count=None).check_payment(last_id=billId)["status"]["value"] #Get payment status

                        await sleep(2) #Time-out 

                        if value_status == "WAITING":pass
                        elif value_status == "PAID":
                            #Update balance, insert new amount 
                            update_balance = session.query(User).filter_by(user_id=user_id).first()
                            update_balance.balance = float(update_balance.balance) + float(message.text)
                            session.commit()

                            await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {float(message.text)}‚ÇΩ")
                            break
                    
                except ValueError:await message.answer("–ù—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ!")
                except KeyError:pass
        else:
            
            if message.text.isalpha() and message.text.isdigit():return False

            phone = re.sub("[^0-9]", "", message.text) #Only digital value

            if phone.startswith("7") or phone.startswith("8"): #Russia country
                #Phone format
                phone = f"7{phone[1:]}"

                globals.attack_country = "ru" #Set country name for attack

            elif phone.startswith("38"): #Ukraine country
                #Phone format
                arr_phone = phone.split("0")[1]
                phone = f"38{arr_phone}"

                globals.attack_country = "uk" #Set country name for attack
            
            else: #Unknow country or wrong value
                return await message.answer("üîÅ–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å!", reply=True)

            #Update data (last phone and last date)
            update_data = session.query(DataUser).filter_by(user_id=message.from_user.id).first()
            
            update_data.last_phone = phone
            update_data.last_date = dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S")

            session.commit()

            usl = InlineKeyboardMarkup(
                    inline_keyboard = [
                            [InlineKeyboardButton(
                                    text="‚èπ–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_{message.from_user.id}")]
                    ])

            await message.answer(
                    text="‚ñ∂Ô∏è–ê—Ç–∞–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Ç–∞–∫–∏.", 
                    reply_markup = usl
                    )

            globals.start_attack = Bomber(user_id=str(message.from_user.id))
            await globals.start_attack.start(message.text, message.from_user.id)