import re 
from datetime import datetime as dt

import globals
from sites import Bomber
from globals import dp, conn
from config import config

from sqlalchemy import select

from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from db_models.User import session, DataUser

cfg = config.Config()

@dp.message_handler(lambda message: message.text == "üí£–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä")
async def ru_attack_phone(message: Message):
    '''
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê—Ç–∞–∫–æ–≤–∞—Ç—å"

    –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤

    –†—É—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
    '''

    user_data = session.query(DataUser).filter_by(user_id=message.from_user.id).first()

    if user_data == None:
        user_data = DataUser(
                user_id=message.from_user.id, date=dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S"), 
                status=30, last_phone="None", 
                last_date="None"
        )
        session.commit()

        await message.answer(
                f"üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–µ ‚ûú\n\n"
                f"üìå–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –∞—Ç–∞–∫—É!\n\n"
                f"‚òéÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã(–±–µ–∑ +)‚§µÔ∏è", 
                )
    else:
        date  = dt.strptime(user_data.date, "%d-%m-%Y %H:%M:%S") if user_data.date != "None" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" #Time
        date  = dt.strftime(date, "%d-%m-%Y %H:%M:%S") if date != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        phone = f"<code>{user_data.last_phone}</code>" if user_data.last_phone != "None" else "<b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</b>"
        
        await message.answer(
                f"üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–µ ‚ûú\n\n"
                f"üï∞–í—Ä–µ–º—è: <b>{date}</b>\n"
                f"üìå–ù–æ–º–µ—Ä: {phone}\n"
                f"‚è±–û—Å—Ç–∞–ª–æ—Å—å –∫—Ä—É–≥–æ–≤: <b>{user_data.status}</b>\n\n"
                f"‚òéÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã(–±–µ–∑ +)‚§µÔ∏è"
                )

@dp.message_handler(lambda message: message.text == "üí£Attack number")
async def eng_attack_phone(message: Message):
    '''
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê—Ç–∞–∫–æ–≤–∞—Ç—å"

    –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤

    –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
    '''

    user_data = session.query(DataUser).filter_by(user_id=message.from_user.id).first()

    if user_data == None:
        user_data = DataUser(
                user_id=message.from_user.id, date=dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S"), 
                status=30, last_phone="None", 
                last_date="None"
        )
        session.commit()

        await message.answer(
                f"üìÑInformation about the last attack ‚ûú\n\n"
                f"üìåYou haven't made an attack yet!\n\n"
                f"‚òéÔ∏èEnter the victim's phone number (no +)‚§µÔ∏è", 
                )
    else:
        date  = dt.strptime(user_data.date, "%d-%m-%Y %H:%M:%S") if user_data.date != "None" else "Unknown"
        date  = dt.strftime(date, "%d-%m-%Y %H:%M:%S") if date != "Unknown" else "Unknown"
        phone = f"<code>{user_data.last_phone}</code>" if user_data.last_phone != "None" else "<b>Unknown</b>"
        
        await message.answer(
                f"üìÑInformation about the last attack ‚ûú\n\n"
                f"üï∞Time: <b>{date}</b>\n"
                f"üìåPhone number: {phone}\n"
                f"‚è±Circles left: <b>{user_data.status}</b>\n\n"
                f"‚òéÔ∏èEnter the victim's phone number (no +)‚§µÔ∏è"
                )

@dp.message_handler(lambda message: not message.text.startswith((
        "/msg", "/help",
         "/usd", "/btc", 
         "/bnb", "/eth", 
         "/stat", "/mail", 
         "üì≤–ö—É–ø–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä"))
         )
async def take_phone(message: Message):
    if not message.chat.id in cfg.super_groups:
        phone = re.sub("[^0-9]", "", message.text)

        if phone.startswith("7") or phone.startswith("8"):
            phone = f"7{phone[1:]}"
            globals.attack_country = "ru"

        elif phone.startswith("38") or phone.startswith("+38"):
            arr_phone = phone.split("0")[1]
            phone = f"38{arr_phone}"
            globals.attack_country = "uk"
            
        else:
            return await message.answer("üîÅ–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å!", reply=True)

        #Update data (last phone and last date)
        update_data = session.query(DataUser).filter_by(user_id=message.from_user.id).first()

        update_data.last_phone = phone
        update_data.last_date = dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S")

        session.commit()

        usl = InlineKeyboardMarkup(
                inline_keyboard = [
                        [InlineKeyboardButton(
                                text="‚èπ–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_{message.from_user.id}")]
                ])

        await message.answer(
                text="‚ñ∂Ô∏è–ê—Ç–∞–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Ç–∞–∫–∏.", 
                reply_markup = usl
                )

        globals.start_attack = Bomber(user_id=str(message.from_user.id))
        await globals.start_attack.start(message.text, message.from_user.id)